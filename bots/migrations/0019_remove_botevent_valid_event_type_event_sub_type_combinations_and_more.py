# Generated by Django 5.1.2 on 2025-04-03 07:36

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('bots', '0018_webhooksecret_webhooksubscription_and_more'),
    ]

    operations = [
        migrations.RemoveConstraint(
            model_name='botevent',
            name='valid_event_type_event_sub_type_combinations',
        ),
        migrations.AlterField(
            model_name='botevent',
            name='event_sub_type',
            field=models.IntegerField(choices=[(1, 'Bot could not join meeting - Meeting Not Started - Waiting for Host'), (2, 'Fatal error - Process Terminated'), (3, 'Bot could not join meeting - Zoom Authorization Failed'), (4, 'Bot could not join meeting - Zoom Meeting Status Failed'), (5, 'Bot could not join meeting - Unpublished Zoom Apps cannot join external meetings. See https://developers.zoom.us/blog/prepare-meeting-sdk-app-for-review'), (6, 'Fatal error - RTMP Connection Failed'), (7, 'Bot could not join meeting - Zoom SDK Internal Error'), (8, 'Fatal error - UI Element Not Found'), (9, 'Bot could not join meeting - Request to join denied'), (10, 'Leave requested - User requested'), (11, 'Leave requested - Auto leave silence'), (12, 'Leave requested - Auto leave only participant in meeting'), (13, 'Fatal error - Heartbeat timeout'), (14, 'Bot could not join meeting - Meeting not found')], null=True),
        ),
        migrations.AddConstraint(
            model_name='botevent',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('event_type', 7), models.Q(('event_sub_type', 2), ('event_sub_type', 6), ('event_sub_type', 8), ('event_sub_type', 13), _connector='OR')), models.Q(('event_type', 9), models.Q(('event_sub_type', 1), ('event_sub_type', 3), ('event_sub_type', 4), ('event_sub_type', 5), ('event_sub_type', 7), ('event_sub_type', 9), ('event_sub_type', 14), _connector='OR')), models.Q(('event_type', 8), models.Q(('event_sub_type', 10), ('event_sub_type', 11), ('event_sub_type', 12), ('event_sub_type__isnull', True), _connector='OR')), models.Q(models.Q(('event_type', 7), _negated=True), models.Q(('event_type', 9), _negated=True), models.Q(('event_type', 8), _negated=True), ('event_sub_type__isnull', True)), _connector='OR'), name='valid_event_type_event_sub_type_combinations'),
        ),
    ]
