# Generated by Django 5.1.2 on 2024-12-02 04:40

import bots.models
import concurrency.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(editable=False, max_length=32, unique=True)),
                ('name', models.CharField(default='My bot', max_length=255)),
                ('meeting_url', models.CharField(max_length=511)),
                ('meeting_uuid', models.CharField(blank=True, max_length=511, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('version', concurrency.fields.IntegerVersionField(default=0, help_text='record revision number')),
                ('state', models.IntegerField(choices=[(1, 'Ready'), (2, 'Joining - Request Not Started By Bot'), (3, 'Joining - Request Started By Bot'), (4, 'Joined - Not Recording'), (5, 'Joined - Recording'), (6, 'Leaving - Request Not Started By Bot'), (7, 'Leaving - Request Started By Bot'), (8, 'Ended'), (9, 'Fatal Error'), (10, 'Waiting Room')], default=1)),
                ('sub_state', models.IntegerField(choices=[(1, 'Fatal Error - Meeting Not Started - Waiting for Host'), (2, 'Fatal Error - Process Terminated')], default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BotEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('old_state', models.IntegerField(choices=[(1, 'Ready'), (2, 'Joining - Request Not Started By Bot'), (3, 'Joining - Request Started By Bot'), (4, 'Joined - Not Recording'), (5, 'Joined - Recording'), (6, 'Leaving - Request Not Started By Bot'), (7, 'Leaving - Request Started By Bot'), (8, 'Ended'), (9, 'Fatal Error'), (10, 'Waiting Room')])),
                ('new_state', models.IntegerField(choices=[(1, 'Ready'), (2, 'Joining - Request Not Started By Bot'), (3, 'Joining - Request Started By Bot'), (4, 'Joined - Not Recording'), (5, 'Joined - Recording'), (6, 'Leaving - Request Not Started By Bot'), (7, 'Leaving - Request Started By Bot'), (8, 'Ended'), (9, 'Fatal Error'), (10, 'Waiting Room')])),
                ('old_sub_state', models.IntegerField(choices=[(1, 'Fatal Error - Meeting Not Started - Waiting for Host'), (2, 'Fatal Error - Process Terminated')], null=True)),
                ('new_sub_state', models.IntegerField(choices=[(1, 'Fatal Error - Meeting Not Started - Waiting for Host'), (2, 'Fatal Error - Process Terminated')], null=True)),
                ('event_type', models.IntegerField(choices=[(1, 'Join Requested by API'), (2, 'Join Requested by Bot'), (3, 'Waiting for Host to Start Meeting Message Received'), (4, 'Bot Put in Waiting Room'), (5, 'Bot Joined Meeting'), (6, 'Bot Recording Permission Granted'), (7, 'Process Terminated'), (8, 'Meeting Ended'), (9, 'Leave Requested by API'), (10, 'Leave Requested by Bot'), (11, 'Bot Left Meeting')])),
                ('version', models.BigIntegerField()),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bot_events', to='bots.bot')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(max_length=255)),
                ('user_uuid', models.CharField(blank=True, max_length=255, null=True)),
                ('full_name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='bots.bot')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('object_id', models.CharField(editable=False, max_length=32, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='projects', to='accounts.organization')),
            ],
        ),
        migrations.CreateModel(
            name='Credentials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credential_type', models.IntegerField(choices=[(1, 'Deepgram'), (2, 'Zoom OAuth')])),
                ('_encrypted_data', models.BinaryField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credentials', to='bots.project')),
            ],
        ),
        migrations.AddField(
            model_name='bot',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='bots', to='bots.project'),
        ),
        migrations.CreateModel(
            name='ApiKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('object_id', models.CharField(editable=False, max_length=32, unique=True)),
                ('key_hash', models.CharField(max_length=64, unique=True)),
                ('disabled_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_keys', to='bots.project')),
            ],
        ),
        migrations.CreateModel(
            name='Recording',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recording_type', models.IntegerField(choices=[(1, 'Audio and Video'), (2, 'Audio Only')])),
                ('transcription_type', models.IntegerField(choices=[(1, 'Non realtime'), (2, 'Realtime'), (3, 'No Transcription')])),
                ('is_default_recording', models.BooleanField(default=False)),
                ('state', models.IntegerField(choices=[(1, 'Not Started'), (2, 'In Progress'), (3, 'Complete'), (4, 'Failed')], default=1)),
                ('transcription_state', models.IntegerField(choices=[(1, 'Not Started'), (2, 'In Progress'), (3, 'Complete'), (4, 'Failed')], default=1)),
                ('transcription_provider', models.IntegerField(blank=True, choices=[(1, 'Deepgram')], null=True)),
                ('version', concurrency.fields.IntegerVersionField(default=0, help_text='record revision number')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('first_buffer_timestamp_ms', models.BigIntegerField(blank=True, null=True)),
                ('file', models.FileField(storage=bots.models.RecordingStorage(), upload_to='')),
                ('object_id', models.CharField(editable=False, max_length=32, unique=True)),
                ('bot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recordings', to='bots.bot')),
            ],
        ),
        migrations.CreateModel(
            name='Utterance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio_blob', models.BinaryField()),
                ('audio_format', models.IntegerField(choices=[(1, 'PCM'), (2, 'MP3')], default=1)),
                ('timestamp_ms', models.BigIntegerField()),
                ('duration_ms', models.IntegerField()),
                ('transcription', models.JSONField(default=None, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='utterances', to='bots.participant')),
                ('recording', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='utterances', to='bots.recording')),
            ],
        ),
        migrations.AddConstraint(
            model_name='participant',
            constraint=models.UniqueConstraint(fields=('bot', 'uuid'), name='unique_participant_per_bot'),
        ),
        migrations.AddConstraint(
            model_name='credentials',
            constraint=models.UniqueConstraint(fields=('project', 'credential_type'), name='unique_project_credentials'),
        ),
        migrations.AddConstraint(
            model_name='bot',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('state', 9), models.Q(('sub_state', 1), ('sub_state', 2), _connector='OR')), models.Q(models.Q(('state', 9), _negated=True), ('sub_state__isnull', True)), _connector='OR'), name='valid_state_substate_combinations'),
        ),
    ]
